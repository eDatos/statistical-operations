«IMPORT sculptormetamodel»
«EXTENSION extensions::helper»
«EXTENSION extensions::dbhelper»
«EXTENSION extensions::properties»
«EXTENSION generator::SpecialCases»  

«AROUND templates::domain::DomainObjectAttributeAnnotation::columnAnnotations FOR Attribute»
	«IF type == "DateTimeTZ"»
		@org.hibernate.annotations.Columns(columns={@javax.persistence.Column(name="«getDatabaseName()»"),@javax.persistence.Column(name="«getDatabaseName()»_TZ")})
		@org.hibernate.annotations.Type(type="org.jadira.usertype.dateandtime.joda.PersistentDateTimeWithZone")
	«ELSE»
    	«targetDef.proceed()»
    «ENDIF»
«ENDAROUND»

«AROUND templates::domain::DomainObjectAttributeAnnotation::auditAnnotations FOR Attribute»
	«IF type == "DateTime"»
		@org.hibernate.annotations.Columns(columns={@javax.persistence.Column(name="«getDatabaseName()»"),@javax.persistence.Column(name="«getDatabaseName()»_TZ")})
		@org.hibernate.annotations.Type(type="org.jadira.usertype.dateandtime.joda.PersistentDateTimeWithZone")
	«ELSE»
	     «targetDef.proceed()»
    «ENDIF»
«ENDAROUND»


«AROUND templates::db::OracleDDL::column(String prefix, boolean parentIsNullable) FOR Attribute-»
  «IF type == "DateTimeTZ" || name == "lastUpdated" || name == "createdDate"»«getDatabaseName()»_TZ VARCHAR2(50 CHAR)«parentIsNullable || nullable ? "" : getDatabaseTypeNullability()-»,
  «ENDIF-»
  «getDatabaseName(prefix, this)» «useCharactersInsteadBytes(getDatabaseType())»«parentIsNullable ? "" : getDatabaseTypeNullability()-»
«ENDAROUND»

«AROUND templates::db::OracleDDL::enumColumn(String prefix, boolean parentIsNullable) FOR Reference-»
  «getDatabaseName(prefix, this)» «useCharactersInsteadBytes(getEnumDatabaseType())»«parentIsNullable ? "" : getDatabaseTypeNullability()-»
«ENDAROUND»

«AROUND templates::db::CustomDDL::column(String prefix, boolean parentIsNullable) FOR Attribute-»
  «IF type == "DateTimeTZ" || name == "lastUpdated" || name == "createdDate"»«getDatabaseName()»_TZ VARCHAR(50)«parentIsNullable || nullable ? "" : getDatabaseTypeNullability()-»,
  «ENDIF-»
  «targetDef.proceed()-»
«ENDAROUND»

«AROUND templates::domain::DomainObjectProperties::domainObjectProperties FOR DomainObject-»
	«IF name.endsWith("Dto")»

	«ELSE»
     «targetDef.proceed()»
    «ENDIF»	
«ENDAROUND»

«AROUND templates::domain::DomainObject::clone FOR DomainObject-»

«ENDAROUND»

«AROUND templates::domain::DomainObjectAttributeAnnotation::idAnnotations FOR Attribute»
    «IF getDomainObject().hasHint("idSequence")»
        @javax.persistence.Id
        @javax.persistence.GeneratedValue(generator="«getDomainObject().getHint('idSequence')»", strategy=javax.persistence.GenerationType.TABLE)
        @org.hibernate.annotations.GenericGenerator(
			name = "«getDomainObject().getHint('idSequence')»",
			strategy = "org.siemac.metamac.core.common.hibernate.id.TableGenerator",
			parameters = {
				@org.hibernate.annotations.Parameter(name = "table_name", value = "TB_SEQUENCES"),
				@org.hibernate.annotations.Parameter(name = "segment_column_name", value = "SEQUENCE_NAME"),
				@org.hibernate.annotations.Parameter(name = "value_column_name", value = "SEQUENCE_NEXT_VALUE"),
				@org.hibernate.annotations.Parameter(name = "optimizer", value = "pooled-lo"),
				@org.hibernate.annotations.Parameter(name = "increment_size", value = "50"),
				@org.hibernate.annotations.Parameter(name = "segment_value", value = "«getDomainObject().getHint('idSequence')»")})
        @javax.persistence.Column(name="«getDatabaseName()»")
    «ELSE»
    	«targetDef.proceed()»
    «ENDIF»
«ENDAROUND»

«REM»Skip unique constraint in InternationalString and LocalisedString this will be for "id", and primary key restriction already exists for this attribute «ENDREM» 
«AROUND templates::db::OracleDDL::uniqueConstraint FOR DomainObject» 
	«IF name != "InternationalString" && name != "LocalisedString" && name != "ExternalItem" -» 
		«targetDef.proceed() -» 
	«ENDIF -» 
«ENDAROUND» 

«REM»Skip script database generation for hibernate_sequence«ENDREM»
«AROUND templates::db::OracleDDL::dropSequence FOR Application»
«ENDAROUND»

«AROUND templates::db::OracleDDL::createSequence FOR Application»
«ENDAROUND»