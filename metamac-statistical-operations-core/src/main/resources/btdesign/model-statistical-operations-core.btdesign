import "classpath:/btdesign/metamac-core-common-dtos.btdesign"
import "classpath:/btdesign/metamac-statistical-operations-core-dtos.btdesign"
import "classpath:/btdesign/metamac-statistical-operations-core-enums.btdesign"
import "classpath:/btdesign/export/metamac-core-common-entity.btdesign"


Application StatisticalOperations {
    basePackage=org.siemac.metamac.statistical.operations

    Module core {
		basePackage=org.siemac.metamac.statistical.operations.core
		
		
		// ----------------------------------------------------------------
		// 							FACADE SERVICES
		// ----------------------------------------------------------------  
		
		"Provides access to StatisticalOperationsServiceFacade"
		Service StatisticalOperationsServiceFacade {
       		> @StatisticalOperationsBaseService
       		> @StatisticalOperationsListsService
       		
       		"SurveyType"
       		List<@SurveyTypeDto> findAllSurveyTypes  throws MetamacException;
       		@SurveyTypeDto findSurveyTypeById(Long id) throws MetamacException;
       		
       		"InstanceType"
       		List<@InstanceTypeDto> findAllInstanceTypes  throws MetamacException;
       		@InstanceTypeDto findInstanceTypeById(Long id) throws MetamacException;
       		
       		"SurveySource"
       		List<@SurveySourceDto> findAllSurveySources throws MetamacException;
       		@SurveySourceDto findSurveySourceById(Long id) throws MetamacException;
       		
       		"OfficialityType"
       		List<@OfficialityTypeDto> findAllOfficialityTypes throws MetamacException;
       		@OfficialityTypeDto findOfficialityTypeById(Long id) throws MetamacException;
       		
       		"CollMethod"
       		List<@CollMethodDto> findAllCollMethods throws MetamacException;
       		@CollMethodDto findCollMethodById(Long id) throws MetamacException;
       		
       		"Cost"
       		List<@CostDto> findAllCosts throws MetamacException;
       		@CostDto findCostById(Long id) throws MetamacException;
       		
       		"Families"
       		@FamilyDto createFamily(@FamilyDto familyDto) throws MetamacException;
       		@FamilyDto updateFamily(@FamilyDto familyDto) throws MetamacException;
       		deleteFamily(Long familyId) throws MetamacException;
       		List<@FamilyBaseDto> findAllFamilies  throws MetamacException;
       		MetamacCriteriaResult<@FamilyBaseDto> findFamilyByCondition(MetamacCriteria criteria)  throws MetamacException;
       		@FamilyDto findFamilyById(Long id) throws MetamacException;
       		@FamilyDto findFamilyByCode(String code) throws MetamacException;
       		@FamilyDto findFamilyByUrn(String urn) throws MetamacException;
       		@FamilyDto publishInternallyFamily(Long familyId) throws MetamacException;
       		@FamilyDto publishExternallyFamily(Long familyId) throws MetamacException;
       		List<@OperationBaseDto> findOperationsForFamily(Long familyId) throws MetamacException;
       		List<@OperationBaseDto> addOperationForFamily(Long familyId, Long operationId) throws MetamacException;
       		List<@OperationBaseDto> removeOperationForFamily(Long familyId, Long operationId) throws MetamacException;
       		
       		
       		"Operations"
       		@OperationDto createOperation(@OperationDto operationDto) throws MetamacException;
       		@OperationDto updateOperation(@OperationDto operationDto) throws MetamacException;
       		deleteOperation(Long operationId) throws MetamacException;
       		List<@OperationBaseDto> findAllOperations  throws MetamacException;
       		MetamacCriteriaResult<@OperationBaseDto> findOperationsByCondition(MetamacCriteria criteria)  throws MetamacException;
       		@OperationDto findOperationById(Long id) throws MetamacException;
       		@OperationDto findOperationByCode(String code) throws MetamacException;
       		@OperationDto findOperationByUrn(String urn) throws MetamacException;
       		@OperationDto publishInternallyOperation(Long operationId) throws MetamacException;
       		org.siemac.metamac.statistical.operations.core.serviceimpl.result.PublishExternallyOperationResult publishExternallyOperation(Long operationId) throws MetamacException;
       		List<@FamilyBaseDto> findFamiliesForOperation(Long operationId) throws MetamacException;
       		List<@InstanceBaseDto> findInstancesForOperation(Long operationId) throws MetamacException;
       		List<@FamilyBaseDto> addFamilyForOperation(Long operationId, Long familyId) throws MetamacException;
       		List<@FamilyBaseDto> removeFamilyForOperation(Long operationId, Long familyId) throws MetamacException;
       		
       		"Instances"
       		@InstanceDto createInstance(Long operationId, @InstanceDto instanceDto) throws MetamacException;
       		@InstanceDto updateInstance(@InstanceDto instanceDto) throws MetamacException;
       		List<@InstanceBaseDto> updateInstancesOrder(Long operationId, List<Long> instancesIdList) throws MetamacException;
       		deleteInstance(Long instanceId) throws MetamacException;
       		List<@InstanceBaseDto> findAllInstances  throws MetamacException;
       		MetamacCriteriaResult<@InstanceBaseDto> findInstanceByCondition(MetamacCriteria criteria)  throws MetamacException;
       		@InstanceDto findInstanceById(Long id) throws MetamacException;
       		@InstanceDto findInstanceByCode(String code) throws MetamacException;
       		@InstanceDto findInstanceByUrn(String urn) throws MetamacException;
       		@InstanceBaseDto findInstanceBaseById(Long id) throws MetamacException;
       		@InstanceDto publishInternallyInstance(Long instanceId) throws MetamacException;
       		@InstanceDto publishExternallyInstance(Long instanceId) throws MetamacException;
       		@OperationBaseDto findOperationForInstance(Long instanceId) throws MetamacException;
	   }

		Service StreamMessagingServiceFacade {
		    > @StreamMessagingService
		    org.siemac.metamac.statistical.operations.core.serviceimpl.result.SendStreamMessageResult sendMessage(@Operation operation);
		    resendAllPendingAndFailedMessages() throws MetamacException;
		}
		
		// ----------------------------------------------------------------
		// 							SERVICES
		// ----------------------------------------------------------------

		Service StreamMessagingService {
		    > @StatisticalOperationsBaseService
		    org.siemac.metamac.statistical.operations.core.serviceimpl.result.SendStreamMessageResult sendMessage(@Operation operation);
		    resendAllPendingAndFailedMessages() throws MetamacException;
		}

		"Provides access to STATISTICAL OPERAETIONS Base Artefacts"
 		Service StatisticalOperationsBaseService {
 			> @FamilyRepository
 			> @OperationRepository
 			> @InstanceRepository

       		"Family" 
       		@Family findFamilyById(Long id) throws MetamacException;
       		@Family findFamilyByCode(String code) throws MetamacException;
       		@Family findFamilyByUrn(String urn) throws MetamacException;
    		@Family createFamily(@Family family) throws MetamacException;
       		@Family updateFamily(@Family family) throws MetamacException;
    		deleteFamily(Long familyId) throws MetamacException;
    		List<@Family> findAllFamilies throws MetamacException;
    		List<@Family> findFamilyByCondition(List<ConditionalCriteria> condition) throws MetamacException;
    		PagedResult<@Family> findFamilyByCondition(List<ConditionalCriteria> condition, PagingParameter pagingParameter) throws MetamacException;
    		@Family publishInternallyFamily(Long familyId) throws MetamacException;
       		@Family publishExternallyFamily(Long familyId) throws MetamacException;
       		
       		addOperationFamilyAssociation(Long familyId, Long operationId) throws MetamacException;
       		removeOperationFamilyAssociation(Long familyId, Long operationId) throws MetamacException;
    		
			"Operation"			
			@Operation findOperationById(Long id) throws MetamacException;
			@Operation findOperationByCode(String code) throws MetamacException;
			@Operation findOperationByUrn(String urn) throws MetamacException;
			@Operation createOperation(@Operation operation) throws MetamacException;
       		@Operation updateOperation(@Operation operation) throws MetamacException;
			deleteOperation(Long operationId) throws MetamacException;
			List<@Operation> findAllOperations throws MetamacException;
			List<@Operation> findOperationByCondition(List<ConditionalCriteria> condition) throws MetamacException;
			PagedResult<@Operation> findOperationByCondition(List<ConditionalCriteria> condition, PagingParameter pagingParameter) throws MetamacException;
			@Operation publishInternallyOperation(Long operationId) throws MetamacException;
       		@Operation publishExternallyOperation(Long operationId) throws MetamacException;
			
			"Instance"		
			@Instance findInstanceById(Long id) throws MetamacException;
			@Instance findInstanceByCode(String code) throws MetamacException;
			@Instance findInstanceByUrn(String urn) throws MetamacException;
			@Instance createInstance(Long operationId, @Instance instance) throws MetamacException;
       		@Instance updateInstance(@Instance instance) throws MetamacException;
       		List<@Instance> updateInstancesOrder(Long operationId, List<Long> instancesIdList) throws MetamacException;
			deleteInstance(Long instanceId) throws MetamacException;
			List<@Instance> findAllInstances throws MetamacException;
			List<@Instance> findInstanceByCondition(List<ConditionalCriteria> condition) throws MetamacException;
			PagedResult<@Instance> findInstanceByCondition(List<ConditionalCriteria> condition, PagingParameter pagingParameter) throws MetamacException;
			@Instance publishInternallyInstance(Long instanceId) throws MetamacException;
       		@Instance publishExternallyInstance(Long instanceId) throws MetamacException;
	   }
	   
	   
	   	"Provides access to LISTS Artefacts"
 		Service StatisticalOperationsListsService {
 			> @SurveyTypeRepository
 			> @InstanceTypeRepository
 			> @SurveySourceRepository
 			> @OfficialityTypeRepository
 			> @CollMethodRepository
 			> @CostRepository
 			
			"SurveyTypeListRepository"
			@SurveyType findSurveyTypeById(Long id) throws MetamacException;
			List<@SurveyType> findAllSurveyTypes;
			
			"InstanceTypeRepository"
			@InstanceType findInstanceTypeById(Long id) throws MetamacException;
			List<@InstanceType> findAllInstanceTypes;
			
			"SourceDataRepository"
			@SurveySource findSurveySourceById(Long id) throws MetamacException;
			List<@SurveySource> findAllSurveySources;
			
			"OfficialityTypeRepository"
			@OfficialityType findOfficialityTypeById(Long id) throws MetamacException;
			List<@OfficialityType> findAllOfficialityTypes;
			
			"CollMethodRepository"
			@CollMethod findCollMethodById(Long id) throws MetamacException;
			List<@CollMethod> findAllCollMethods;
			
			"CostRepository"
			@Cost findCostById(Long id) throws MetamacException;
			List<@Cost> findAllCosts;
	   }	
		
		// ----------------------------------------------------------------
		// 							ENTITIES
		// ---------------------------------------------------------------- 
		
		"Survey Type List"
    	Entity SurveyType {
    		databaseTable="TB_LIS_SURVEY_TYPES"
    		hint="idSequence=SURVEY_TYPES"
    		
    		not auditable
    		String identifier;
    		- @InternationalString description nullable;
    		
    		Repository SurveyTypeRepository {
    			findById;
    			findAll;
    		}
    	}
    	
    	"Instance Type List"
    	Entity InstanceType {
    		databaseTable="TB_LIS_INSTANCE_TYPES"
    		hint="idSequence=INSTANCE_TYPES"
    		
    		not auditable
    		String identifier;
    		- @InternationalString description nullable;
    		
    		Repository InstanceTypeRepository {
    			findById;
    			findAll;
    		}
    	}
    	
    	"Survey Source List"
    	Entity SurveySource {
    		databaseTable="TB_LIS_SURVEY_SOURCES"
    		hint="idSequence=SURVEY_SOURCES"
    		
    		not auditable
    		String identifier;
    		- @InternationalString description nullable;
    		
    		Repository SurveySourceRepository {
    			findById;
    			findAll;
    		}
    	}
    	
    	"Officiality Type List"
    	Entity OfficialityType {
    		databaseTable="TB_LIS_OFFICIALITY_TYPES"
    		hint="idSequence=OFFICIALITY_TYPES"
    		
    		not auditable
    		String identifier;
    		- @InternationalString description nullable;
    		
    		Repository OfficialityTypeRepository {
    			findById;
    			findAll;
    		}
    	}
    	
    	"Coll Method List"
    	Entity CollMethod {
    		databaseTable="TB_LIS_COLL_METHODS"
    		hint="idSequence=COLL_METHODS"
    		
    		not auditable
    		String identifier;
    		- @InternationalString description nullable;
    		
    		Repository CollMethodRepository {
    			findById;
    			findAll;
    		}
    	}
    	
    	"Coll Method List"
    	Entity Cost {
    		databaseTable="TB_LIS_COSTS"
    		hint="idSequence=COSTS"
    		
    		not auditable
    		String identifier;
    		- @InternationalString description nullable;
    		
    		Repository CostRepository {
    			findById;
    			findAll;
    		}
    	}
		
		
		"Semantic grouping of statistical operations"
		Entity Family {
			databaseTable="TB_FAMILIES"
			hint="idSequence=FAMILIES"
			
			gap
			
			"Semantic identifier"
       		String code;
       		"URN"
       		String urn length="4000";
       		"TITLE"
       		- @InternationalString title cascade="all" databaseColumn="TITLE_FK";
       		"TITLE_ALTERNATIVE"
       		- @InternationalString acronym cascade="all" nullable databaseColumn="ACRONYM_FK";
       		"DESCRIPTION"
       		- @InternationalString description cascade="all" nullable databaseColumn="DESCRIPTION_FK";
       		"Related statistical operations"
       		- Set<@Operation> operations cascade="none" databaseJoinTable="TB_FAMILIES_OPERATIONS" <-> families;
			"INTERNAL_INVENTORY_DATE"
			DateTimeTZ internalInventoryDate nullable;
       		"PROC_STATUS"
       		- @ProcStatusEnum procStatus not nullable;
       		"INVENTORY_DATE"
       		DateTimeTZ inventoryDate nullable;
       		
       		"Last update to optimistic locking"
			DateTimeTZ updateDate nullable;
		
			Repository FamilyRepository {
				findById;
		   		findAll;
		   		save;
		   		delete;
		   		findByCondition;
				findByCondition(PagingParameter pagingParameter);
			}
		}  
		
		"Statistical operation"
		Entity Operation {
			databaseTable="TB_OPERATIONS"
			hint="idSequence=OPERATIONS"
			
			gap
			
			- @ExternalItem commonMetadata nullable cascade="all" databaseColumn="COMMON_METADATA_FK";
			
			"Metadata CODE"
       		String code length="11";
       		"URN"
       		String urn length="4000";
       		"Metadata TITLE"
       		- @InternationalString title cascade="all" databaseColumn="TITLE_FK";
       		"Metadata TITLE_ALTERNATIVE"
       		- @InternationalString acronym cascade="all" nullable databaseColumn="ACRONYM_FK";
       		
       		"Related families"
       		- Set<@Family> families cascade="none" <-> operations;
       		"Subject areas and subject codes. Its type is CATEGORY"
       		- @ExternalItem subjectArea nullable cascade="all" databaseColumn="SUBJECT_AREA_FK";
       		"Metadata SECONDARY_SUBJECT_AREAS. Its type is CATEGORY"
       		- Set<@ExternalItem> secondarySubjectAreas databaseColumn="SECUN_SUBJECT_AREAS_FK" databaseJoinTable="TB_EI_SECONDARY_AREAS" cascade="all-delete-orphan";
       		
       		"Metadata OBJECTIVE"
       		- @InternationalString objective cascade="all" nullable databaseColumn="OBJECTIVE_FK";
       		"Metadata DESCRIPTION"
       		- @InternationalString description cascade="all" nullable databaseColumn="DESCRIPTION_FK";
       		"Related instances"
       		-Bag<@Instance> instances inverse <-> operation orderby="order desc";
       		
       		"Metadata SURVEY_TYPE"
       		- @SurveyType surveyType cascade="none" nullable databaseColumn="SURVEY_TYPE_FK";
       		"Metadata OFFICIALITY_TYPE"
       		- @OfficialityType officialityType cascade="none" nullable databaseColumn="OFFICIALITY_TYPE_FK";
       		"Metadata INDICATOR_SYSTEM"
			Boolean indicatorSystem;
       		
       		"Metadata PRODUCER. Its type is ORGANIZATION"
       		- Set<@ExternalItem> producer databaseColumn="PRODUCER_FK" databaseJoinTable="TB_EI_PRODUCERS"  cascade="all-delete-orphan";
       		"Metadata REGIONAL_RESPONSIBLE. Its type is ORGANIZATION"
       		- Set<@ExternalItem> regionalResponsible databaseColumn="REGIONAL_RESPONSIBLE_FK" databaseJoinTable="TB_EI_REG_RESPONSIBLES"  cascade="all-delete-orphan";
       		"Metadata REGIONAL_CONTRIBUTOR. Its type is ORGANIZATION"
       		- Set<@ExternalItem> regionalContributor databaseColumn="REGIONAL_CONTRIBUTOR_FK" databaseJoinTable="TB_EI_REG_CONTRIBUTORS"  cascade="all-delete-orphan";
       		"Metadata INTERNAL_INVENTORY_DATE"
			DateTimeTZ internalInventoryDate nullable;
			"Metadata CURRENTLY_ACTIVE"
			Boolean currentlyActive;
       		"Metadata PROC_STATUS"
       		- @ProcStatusEnum procStatus not nullable;
       		"Metadata STATUS"
       		- @StatusEnum status not nullable;
       		
       		"Metadata PUBLISHER"
       		- Set<@ExternalItem> publisher databaseColumn="PUBLISHER_FK" databaseJoinTable="TB_EI_PUBLISHERS"  cascade="all-delete-orphan";
       		"Metadata REL_POL_US_AC"
       		- @InternationalString relPolUsAc cascade="all" nullable databaseColumn="REL_POL_US_AC_FK";
       		"Metadata RELEASE_CALENDAR"
       		Boolean releaseCalendar;
       		"Metadata RELEASE_CALENDAR_ACCESS"
       		String releaseCalendarAccess nullable pattern="'https?://.+'" length="4000";
       		"Metadata UPDATE_FREQUENCY. Its type is CODE"
       		- Set<@ExternalItem> updateFrequency databaseColumn="UPDATE_FREQUENCY_FK" databaseJoinTable="TB_EI_UPDATE_FREQUENCY"  cascade="all-delete-orphan";
       		"INVENTORY_DATE"
       		DateTimeTZ inventoryDate nullable;
       		"Metadata REV_POLICY"
       		- @InternationalString revPolicy cascade="all" nullable databaseColumn="REV_POLICY_FK";
       		"Metadata REV_PRACTICE"
       		- @InternationalString revPractice cascade="all" nullable databaseColumn="REV_PRACTICE_FK";
       		// CONTAT: It comes from AppCommonMetadata
       		
       		
       		// COMMON_LEGAL_ACTS: It comes from AppCommonMetadata
       		"SPECIFIC_LEGAL_ACTS"
       		- @InternationalString specificLegalActs cascade="all" nullable databaseColumn="SPECIFIC_LEGAL_ACTS_FK";
       		// COMMON_DATA_SHARING: It comes from AppCommonMetadata
       		"SPECIFIC_DATA_SHARING"
       		- @InternationalString specificDataSharing cascade="all" nullable databaseColumn="SPECIFIC_DATA_SHARING_FK";
       		// CONFIDENCIALITY_POLICY: It comes from AppCommonMetadata
       		// CONFIDENCIALITY_DATA_TREATMENT: It comes from AppCommonMetadata
       		
       		"Metadata COMMENT"
       		- @InternationalString comment cascade="all" nullable databaseColumn="COMMENT_FK";
       		"Metadata NOTES"
       		- @InternationalString notes cascade="all" nullable databaseColumn="NOTES_FK";
       		
       		"Last update to optimistic locking"
			DateTimeTZ updateDate nullable;

			- @StreamMessageStatusEnum streamMessageStatus;
       		
			Repository OperationRepository {
				findById;
		   		findAll;
		   		save;
		   		delete;
		   		findByCondition;
				findByCondition(PagingParameter pagingParameter);
			}
		}
		
		"Statistical instance"
		Entity Instance {
			databaseTable="TB_INSTANCES"
			hint="idSequence=INSTANCES"
			
			gap 

			"Order"
			Integer order databaseColumn="ORDER_IDX";
			
			"Metadata CODE"
       		String code;
       		"URN"
       		String urn length="4000";
       		"Metadata TITLE"
       		- @InternationalString title cascade="all" databaseColumn="TITLE_FK";
       		"Metadata TITLE_ALTERNATIVE"
       		- @InternationalString acronym cascade="all" nullable databaseColumn="ACRONYM_FK";
			
       		"Related operation"
       		- @Operation operation not nullable cascade="merge" databaseColumn="OPERATION_FK" <-> instances; 
       		
       		"Metadata DATA_DESCRIPTION"
       		- @InternationalString dataDescription cascade="all" nullable databaseColumn="DATA_DESCRIPTION_FK";
       		"Metadata STATISTICAL_POPULATION" 
       		- @InternationalString statisticalPopulation cascade="all" nullable databaseColumn="STATISTICAL_POPULATION_FK";
       		"Metadata STATISTICAL_UNIT. Its type is CONCEPT"
       		- Set<@ExternalItem> statisticalUnit databaseColumn="STATISTICAL_UNIT_FK" databaseJoinTable="TB_EI_STATISTICAL_UNITS"  cascade="all-delete-orphan";
       		"Metadata GEOGRAPHIC_GRANULARITY. Its type is CODE"
       		- Set<@ExternalItem> geographicGranularity databaseColumn="GEOGRAPHIC_GRANULARITY_FK" databaseJoinTable="TB_EI_GEO_GRANULARITIES"  cascade="all-delete-orphan";
       		"Metadata GEOGRAPHIC_COMPARABILITY"
       		- @InternationalString geographicComparability cascade="all" nullable databaseColumn="GEOGRAPHIC_COMPARABILITY_FK";
       		"Metadata TEMPORAL_GRANULARITY. Its type is CODE"
       		- Set<@ExternalItem> temporalGranularity databaseColumn="TEMPORAL_GRANULARITY_FK" databaseJoinTable="TB_EI_TIME_GRANULARITIES"  cascade="all-delete-orphan";
       		"Metadata TEMPORAL_COMPARABILITY"
       		- @InternationalString temporalComparability cascade="all" nullable databaseColumn="TEMPORAL_COMPARABILITY_FK";
       		"Metadata BASE_PERIOD. Its type is CODE"
       		String basePeriod nullable;
       		"Metadata UNIT_MEASURE. Its type is CODE"
       		- Set<@ExternalItem> unitMeasure databaseColumn="UNIT_MEASURE_FK" databaseJoinTable="TB_EI_UNITS_MEASURE"  cascade="all-delete-orphan";
       		"Metadata STAT_CONC_DEF"
       		- @InternationalString statConcDef cascade="all" nullable databaseColumn="STAT_CONC_DEF_FK";
       		"Metadata STAT_CONC_DEF_LIST. Its type is CONCEPT_SCHEME"
       		- Set<@ExternalItem> statConcDefList databaseColumn="STAT_CONC_DEF_LIST_FK" databaseJoinTable="TB_EI_CONC_DEF_LISTS"  cascade="all-delete-orphan";
       		"Metadata CLASS_SYSTEM"
       		- @InternationalString classSystem cascade="all" nullable databaseColumn="CLASS_SYSTEM_FK";
       		"Metadata CLASS_SYSTEM_LIST. Its type is CONCEPT_SCHEME"
       		- Set<@ExternalItem> classSystemList databaseColumn="CLASS_SYSTEM_LIST_FK" databaseJoinTable="TB_EI_CLASS_SYSTEM_LISTS"  cascade="all-delete-orphan";
       		
       		"Metadata INSTANCE_TYPE"
       		- @InstanceType instanceType cascade="none" nullable databaseColumn="INSTANCE_TYPE_FK";
       		
       		"Metadata INTERNAL_INVENTORY_DATE"
			DateTimeTZ internalInventoryDate nullable;
       		"Metadata PROC_STATUS"
       		- @ProcStatusEnum procStatus not nullable;
       		"Metadata DOC_METHOD"
       		- @InternationalString docMethod cascade="all" nullable databaseColumn="DOC_METHOD_FK";
       		"Metadata SURVEY_SOURCE"
       		- @SurveySource surveySource cascade="none" nullable databaseColumn="SURVEY_SOURCE_FK";
       		"Metadata COLL_METHOD"
       		- @CollMethod collMethod cascade="none" nullable databaseColumn="COLL_METHOD_FK";
       		"Metadata INFORMATION_SUPPLIERS. Its type is ORGANIZATION / CONCEPTS"
       		- Set<@ExternalItem> informationSuppliers databaseColumn="INFORMATION_SUPPLIERS_FK" databaseJoinTable="TB_EI_INF_SUPPLIERS"  cascade="all-delete-orphan";
       		"Metadata FREQ_COLL. Its type is CODE"
       		- Set<@ExternalItem> freqColl databaseColumn="FREQ_COLL_FK" databaseJoinTable="TB_EI_FREQ_COLL"  cascade="all-delete-orphan";
       		"Metadata DATA_VALIDATION"
       		- @InternationalString dataValidation cascade="all" nullable databaseColumn="DATA_VALIDATION_FK";
       		"Metadata DATA_COMPILATION"
       		- @InternationalString dataCompilation cascade="all" nullable databaseColumn="DATA_COMPILATION_FK";
       		"Metadata ADJUSTMENT"
       		- @InternationalString adjustment cascade="all" nullable databaseColumn="ADJUSTMENT_FK";
       		"Metadata COST_BURDEN"
       		- @InternationalString costBurden cascade="all" nullable databaseColumn="COST_BURDEN_FK";
       		"Metadata COST"
       		- Set<@Cost> cost cascade="none" databaseColumn="COST_FK" databaseJoinTable="TB_INSTANCES_COSTS";

       		"INVENTORY_DATE"
       		DateTimeTZ inventoryDate nullable;
       		
       		"Metadata QUALITY_DOC"
       		- @InternationalString qualityDoc cascade="all" nullable databaseColumn="QUALITY_DOC_FK";
       		"Metadata QUALITY_ASSURE"
       		- @InternationalString qualityAssure cascade="all" nullable databaseColumn="QUALITY_ASSURE_FK";
       		"Metadata QUALITY_ASSMNT"
       		- @InternationalString qualityAssmnt cascade="all" nullable databaseColumn="QUALITY_ASSMNT_FK";
       		"Metadata USER_NEEDS"
       		- @InternationalString userNeeds cascade="all" nullable databaseColumn="USER_NEEDS_FK";
       		"Metadata USER_SAT"
       		- @InternationalString userSat cascade="all" nullable databaseColumn="USER_SAT_FK";
       		"Metadata COMPLETENESS"
       		- @InternationalString completeness cascade="all" nullable databaseColumn="COMPLETENESS_FK";
       		"Metadata TIMELINESS"
       		- @InternationalString timeliness cascade="all" nullable databaseColumn="TIMELINESS_FK";
       		"Metadata PUNCTUALITY"
       		- @InternationalString punctuality cascade="all" nullable databaseColumn="PUNCTUALITY_FK";
       		"Metadata ACCURACY_OVERALL"
       		- @InternationalString accuracyOverall cascade="all" nullable databaseColumn="ACCURACY_OVERALL_FK";
       		"Metadata SAMPLING_ERR"
       		- @InternationalString samplingErr cascade="all" nullable databaseColumn="SAMPLING_ERR_FK";
       		"Metadata NONSAMPLING_ERR"
       		- @InternationalString nonsamplingErr cascade="all" nullable databaseColumn="NONSAMPLING_ERR_FK";
       		"Metadata COHER_X_DOMAIN"
       		- @InternationalString coherXDomain cascade="all" nullable databaseColumn="COHER_X_DOMAIN_FK";
       		"Metadata COHER_INTERNAL"
       		- @InternationalString coherInternal cascade="all" nullable databaseColumn="COHER_INTERNAL_FK";
       		
       		"Metadata COMMENT"
       		- @InternationalString comment cascade="all" nullable databaseColumn="COMMENT_FK";
       		"Metadata NOTES"
       		- @InternationalString notes cascade="all" nullable databaseColumn="NOTES_FK";
       		
       		"Last update to optimistic locking"
			DateTimeTZ updateDate nullable;
       		
			Repository InstanceRepository {
				findById;
		   		findAll;
		   		save;
		   		delete;
		   		findByCondition;
				findByCondition(PagingParameter pagingParameter);
			}
		} 
	}	
}
